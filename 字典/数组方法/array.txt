1.数组的声明方法
	(1): var arr1 = new Array(); //创建一个数组。
	
	(2):var a = new Array(5); //创建一个数组并指定长度，注意不是上限，是长度。
	 
	(3):var a = new Array(["b", 2, "a", 4,]); //创建一个数组并赋值
	 
	(4):var a = ["b", 2, "a", 4,]; //创建一个数组并赋值的简写，注意这里中括号不表示可省略。 
 

2.数组常用方法
	(1):合并两个数组 - concat()
	
		var hege = ["Cecilie", "Lone"];
		var kai = ["Robin"];
		document.write(hege.concat(kai));  //["Cecilie", "Lone","Robin"]
		
	(2):合并三个数组 - concat()
		
		var parents = ["Jani", "Tove"];
		var brothers = ["Stale", "Kai Jim", "Borge"];
		var children = ["Cecilie", "Lone"];
		var family = parents.concat(brothers, children);
		
		document.write(family);  
		 //["Jani", "Tove","Stale", "Kai Jim", "Borge","Cecilie", "Lone"]
		
	(3):用数组的元素组成字符串 - join()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.join();	
		console.log(fruits)    //Banana,Orange,Apple,Mango
	(4):删除数组的最后一个元素 - pop()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.pop(); 
		console.log(fruits)   //["Banana", "Orange", "Apple"]
	
	(5):数组的末尾添加新的元素 - push()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.push("Kiwi") 
		console.log(fruits)   //["Banana", "Orange", "Apple", "Mango","Kiwi"]
		
	(6):将一个数组中的元素的顺序反转排序 - reverse()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.reverse();    
		console.log(fruits)  //["Mango","Apple", "Orange",  "Banana"]
		
	(7):删除数组的第一个元素 - shift()
		
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.shift()	 
		console.log(fruits)      //["Orange", "Apple", "Mango"]
		
	(8):从一个数组中选择元素 - slice()
	
		var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
		fruits.slice(1,3)        
		console.log(fruits)     //["Orange", "Lemon"]
		
	(9):数组排序（按字母顺序升序）- sort()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.sort()   
		console.log(fruits)    //["Apple", "Banana", "Mango", "Orange"]
		
	(10):数字排序（按数字顺序升序）- sort()
	
		var points = [40,100,1,5,25,10];
		points.sort(function(a,b){
			return a-b
		});    
		console.log(points)   //[1,5,10,25,40,100]
		
	(11):数字排序（按数字顺序降序）- sort()
	
		var points = [40,100,1,5,25,10];
		points.sort(function(a,b){
			return b-a
		});   
		console.log(points)  //[100,40,25,10,5,1]
		
	(12):在数组的第2位置添加一个元素 - splice()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.splice(2,0,"Lemon","Kiwi"); 
		console.log(fruits)  //["Banana", "Orange","Lemon","Kiwi", "Apple", "Mango"]
		
		
		删除：     array.splice(index,删除参数个数)
		增加：     array.splice(index,0,要增加的元素)
		替换：     array.splice(index,1,要替换的元素)
		
	(13):转换数组到字符串 -toString()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		var str = fruits.toString();     //Banana,Orange,Apple,Mango
		
	(14):在数组的开头添加新元素 - unshift()
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.unshift("Lemon","Pineapple");   		
		console.log(fruits)  //["Lemon","Pineapple","Banana", "Orange", "Apple", "Mango"]
		
		
	(15):every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。
			//如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。
			//如果所有元素都满足条件，则返回 true
		
		语法：array.every(function(currentValue,index,arr), thisValue)
		
	(16):some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。
			//	some() 方法会依次执行数组的每个元素：
			//	如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。
			//	如果没有满足条件的元素，则返回false。
		语法：array.some(function(currentValue,index,arr),thisValue)
		
	(17):valueOf() 方法返回 Array 对象的原始值。
			//该原始值由 Array 对象派生的所有对象继承。
			//valueOf() 方法通常由 JavaScript 在后台自动调用，并不显式地出现在代码中
ES5新增数组方法

	(1)for Each  //遍历，循环
		语法：array.forEach(function(currentValue, index, arr), thisValue)
		
			//function(currentValue, index, arr) (必需，数组中每个元素需要调用的函数)
				//currentValue	必需。当前元素
				//index	可选。当前元素的索引值。
				//arr	可选。当前元素所属的数组对象。			
			//thisValue (可选,传递给函数的值一般用 "this" 值。如果这个参数为空， "undefined" 会传递给 "this" 值)
	
		 forEach() 对于空数组是不会执行回调函数的
		 
	
		[1, 2 ,3, 4].forEach(console.log);
	
		// 结果：	
		// 1, 0, [1, 2, 3, 4]
		// 2, 1, [1, 2, 3, 4]
		// 3, 2, [1, 2, 3, 4]
		// 4, 3, [1, 2, 3, 4]
		
	(2):map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值
	
		//map() 方法按照原始数组元素顺序依次处理元素
		// map() 不会对空数组进行检测,不会改变原始数组
		
		语法：array.map(function(currentValue,index,arr), thisValue)
	
			//function(currentValue, index, arr) (必需，数组中每个元素需要调用的函数)
				//currentValue	必需。当前元素
				//index	可选。当前元素的索引值。
				//arr	可选。当前元素所属的数组对象。			
			//thisValue (可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ,"this" 的值为 "undefined")
		
	(3):filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素
	
		// filter() 不会对空数组进行检测,不会改变原始数组.
		语法：array.map(function(currentValue,index,arr), thisValue)
	
			//function(currentValue, index, arr) (必需，数组中每个元素需要调用的函数)
				//currentValue	必需。当前元素
				//index	可选。当前元素的索引值。
				//arr	可选。当前元素所属的数组对象。			
			//thisValue (可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ,"this" 的值为 "undefined")
		
	(4):indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置
	
		//该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。
如果在数组中没找到字符串则返回 -1。

		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		var a = fruits.indexOf("Apple");	
		console.log(a)   //2
		
		语法：array.indexOf(item,start)
		
			//item	必须。查找的元素。
			//start	可选的整数参数。规定在字符串中开始检索的位置。
					它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索

	(5):lastIndexOf() 方法可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索
		
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		var a = fruits.lastIndexOf("Apple");
		console.log(a)   //2
		
		//如果要检索的字符串值没有出现，则该方法返回 -1。
该方法将从尾到头地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的结尾（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一个字符在 stringObject 中的位置。stringObject 中的字符位置是从 0 开始的

		//如果在 stringObject 中的 fromindex 位置之前存在 searchvalue，则返回的是出现的最后一个 searchvalue 的位置
		
	(6):reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值.
	
		语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)
			//function(total,currentValue, index,arr) 必需。用于执行每个数组元素的函数。
				//total  (必需。初始值, 或者计算结束后的返回值)
				//currentValue (必需。当前元素)
				//currentIndex (可选。当前元素的索引)
				//arr (可选。当前元素所属的数组对象。)
			//initialValue  可选。传递给函数的初始值
			
	(7)：reduceRight() 方法的功能和 reduce()功能是一样的,不同的是 reduceRight()从数组的末尾向前将数组中的数组项做累加。




ES6新增方法

	(1):copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中
		
		语法：array.copyWithin(target, start, end)
			//target 必需。复制到指定目标索引位置。
			//start	必需。元素复制的起始位置。
			//end	可选。停止复制的索引位置 (默认为 array.length)
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.copyWithin(2, 0)
		console.log(fruits)  //["Banana", "Orange", "Banana", "Orange"]	
	(2):fill() 方法用于将一个固定值替换数组的元素
	
		语法：array.fill(value, start, end)		
		//value	必需。填充的值。
		//start	可选。开始填充位置。
		//end	可选。停止填充位置 (默认为 array.length)
	
		var fruits = ["Banana", "Orange", "Apple", "Mango"];
		fruits.fill("Runoob")
		console.log(fruits)  //["Runoob", "Runoob", "Runoob", "Runoob"]
		
	(3):find() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素
	
		语法：array.find(function(currentValue, index, arr),thisValue)
			//function(currentValue, index,arr)	必需。数组每个元素需要执行的函数。
				//currentValue	必需。当前元素
				//index	可选。当前元素的索引值
				//arr	可选。当前元素所属的数组对象
			//thisValue	可选.传递给函数的值一般用 "this" 值.如果这个参数为空,"undefined"会传递给 "this"值
	
		find() 方法为数组中的每个元素都调用一次函数执行：
		当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。
		如果没有符合条件的元素返回 undefined
		
		let arr=[1,2,234,'sdf',-2];
		arr.find(function(x){
		    return x<=2;
		})//结果：1，返回第一个符合条件的x值
		arr.find(function(x,i,arr){
		    if(x<2){console.log(x,i,arr)}
		})//结果：1 0 [1, 2, 234, "sdf", -2]，-2 4 [1, 2, 234, "sdf", -2]
				
	(4):findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。
		findIndex() 方法为数组中的每个元素都调用一次函数执行：
		当数组中的元素在测试条件时返回 true时,findIndex()返回符合条件的元素的索引位置，之后的值不会再调用执行函数。
		如果没有符合条件的元素返回 -1
		语法：array.findIndex(function(currentValue, index, arr), thisValue)

		let arr=[1,2,234,'sdf',-2];
		arr.findIndex(function(x){
		    return x<=2;
		})//结果：0，返回第一个符合条件的x值的索引
		arr.findIndex(function(x,i,arr){
		    if(x<2){console.log(x,i,arr)}
		})//结果：1 0 [1, 2, 234, "sdf", -2]，-2 4 [1, 2, 234, "sdf", -2]
		
	(5):includes() includes函数与string的includes一样，接收2参数，查询的项以及查询起始位置
	
		let arr=[1,2,234,'sdf',-2];
		arr.includes(2);// 结果true，返回布尔值
		arr.includes(20);// 结果：false，返回布尔值
		arr.includes(2,3)//结果：false，返回布尔值
	(6):keys()  对数组索引的遍历
	
		let arr=[1,2,234,'sdf',-2];
		for(let a of arr.keys()){
		    console.log(a)
		}//结果：0,1,2,3,4  遍历了数组arr的索引
		
	(7):values()  对数组项的遍历
	
		let arr=[1,2,234,'sdf',-2];
		for(let a of arr.values()){
		    console.log(a)
		}//结果：1,2,234,sdf,-2 遍历了数组arr的值
		
	(8):entries()  对数组键值对的遍历
	
		let arr=['w','b'];
		for(let a of arr.entries()){
		    console.log(a)
		}//结果：[0,w],[1,b]
		for(let [i,v] of arr.entries()){
		    console.log(i,v)
		}//结果：0 w,1 b
		
	(9):Array.of() 方法永远返回一个数组，参数不分类型，只分数量，数量为0返回空数组
	
		Array.of('w','i','r')//["w", "i", "r"]返回数组
		Array.of(['w','o'])//[['w','o']]返回嵌套数组
		Array.of(undefined)//[undefined]依然返回数组
		Array.of()//[]返回一个空数组
		
	(10):Array.from() 可以把带有lenght属性类似数组的对象转换为数组，也可以把字符串等可以遍历的对象转换为数组，它接收2个参数，转换对象与回调函数
	
		Array.from({'0':'w','1':'b',length:2})//["w", "b"],返回数组的长度取决于对象中的length，故此项必须有！
		Array.from({'0':'w','1':'b',length:4})//["w", "b", undefined, undefined],数组后2项没有属性去赋值，故undefined
		Array.from({'0':'w','1':'b',length:1})//["w"],length小于key的数目，按序添加数组
		
		//////////////////////////////
		let divs=document.getElementsByTagName('div');
		Array.from(divs)//返回div元素数组
		Array.from('wbiokr')//["w", "b", "i", "o", "k", "r"]
		Array.from([1,2,3],function(x){
		        return x+1})//[2, 3, 4],第二个参数为回调函数

JavaScript不提供找出数组最大元素的函数。结合使用apply方法和Math.max方法，就可以返回数组的最大元素。
var a = [10, 2, 4, 15, 9];
Math.max.apply(null, a)// 15