参考地址：http://es6.ruanyifeng.com/#docs/style

如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。

多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 Airbnb 公司的 JavaScript 风格规范。


一、块级作用域
（1）let 取代 var

	ES6 提出了两个新的声明变量的命令：let和const。其中，let完全可以取代var，因为两者语义相同，而且let没有副作用。


	'use strict';
-------------------------------------------------
	if (true) {
	  let x = 'hello';
	}
-------------------------------------------------	
	for (let i = 0; i < 10; i++) {
	  console.log(i);
	}
-------------------------------------------------
上面代码如果用var替代let，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，var命令做不到这一点。

var命令存在变量提升效用，let命令没有这个问题。

	'use strict';
-------------------------------------------------	
	if (true) {
	  console.log(x); // ReferenceError
	  let x = 'hello';
	}
-------------------------------------------------
上面代码如果使用var替代let，console.log那一行就不会报错，而是会输出undefined，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。

所以，建议不再使用var命令，而是使用let命令取代。（个人认为应该根据实际情况来使用）


（2）全局常量

	在let和const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。

	let和const之间的本质区别：编译器内部的处理不同。
	
		const优于let有几个原因。
			一个是const可以提醒阅读程序的人，这个变量不应该改变；
			另一个是const比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；
			最后一个原因是 JavaScript 编译器会对const进行优化，所以多使用const，有利于提供程序的运行效率

	// bad
	var a = 1, b = 2, c = 3;
-------------------------------------------------	
	// good
	const a = 1;
	const b = 2;
	const c = 3;
-------------------------------------------------	
	// best
	const [a, b, c] = [1, 2, 3];

	const声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。
	
	
二、字符串 
	静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。
	
	// bad
	const a = "foobar";
	const b = 'foo' + a + 'bar';
-------------------------------------------------	
	// acceptable 可以接受的
	const c = `foobar`;
-------------------------------------------------	
	// good
	const a = 'foobar';
	const b = `foo${a}bar`;    //es6中的模板字符串的使用
	const c = 'foobar';

三、解构赋值
	使用数组成员对变量赋值时，优先使用解构赋值。
	const arr = [1, 2, 3, 4];
-------------------------------------------------
	// bad
	const first = arr[0];
	const second = arr[1];
-------------------------------------------------	
	// good
	const [first, second] = arr;
	
	
	函数的参数如果是对象的成员，优先使用解构赋值。
	// bad
	function getFullName(user) {
	  const firstName = user.firstName;
	  const lastName = user.lastName;
	}
-------------------------------------------------	
	// good
	function getFullName(obj) {
	  const { firstName, lastName } = obj;
	}
-------------------------------------------------	
	// best
	function getFullName({ firstName, lastName }) {
	}

	
	如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。
	// bad
	function processInput(input) {
	  return [left, right, top, bottom];
	}
-------------------------------------------------	
	// good
	function processInput(input) {
	  return { left, right, top, bottom };
	}
-------------------------------------------------	
	const { left, right } = processInput(input);
	
	
四、对象
	对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。

	var ref = 'some value';
-------------------------------------------------	
	// bad
	const atom = {
	  ref: ref,
	
	  value: 1,
	
	  addValue: function (value) {
	    return atom.value + value;
	  },
	};
-------------------------------------------------	
	// good
	const atom = {
	  ref,
	
	  value: 1,
	
	  addValue(value) {
	    return atom.value + value;
	  },
	};


五、Class
	总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。
	// bad
	function Queue(contents = []) {
	  this._queue = [...contents];
	}
	Queue.prototype.pop = function() {
	  const value = this._queue[0];
	  this._queue.splice(0, 1);
	  return value;
	}
-------------------------------------------------	
	// good
	class Queue {
	  constructor(contents = []) {
	    this._queue = [...contents];
	  }
	  pop() {
	    const value = this._queue[0];
	    this._queue.splice(0, 1);
	    return value;
	  }
	}
	
	
	使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。
	// bad
	const inherits = require('inherits');
	function PeekableQueue(contents) {
	  Queue.apply(this, contents);
	}
	inherits(PeekableQueue, Queue);
	PeekableQueue.prototype.peek = function() {
	  return this._queue[0];
	}
-------------------------------------------------	
	// good
	class PeekableQueue extends Queue {
	  peek() {
	    return this._queue[0];
	  }
	}


六、模块
	首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。
	// bad
	const moduleA = require('moduleA');
	const func1 = moduleA.func1;
	const func2 = moduleA.func2;
-------------------------------------------------	
	// good
	import { func1, func2 } from 'moduleA';
	
	
	
	使用export取代module.exports。
	
	// commonJS的写法
	var React = require('react');
-------------------------------------------------	
	var Breadcrumbs = React.createClass({
	  render() {
	    return <nav />;
	  }
	});
	
	module.exports = Breadcrumbs;
-------------------------------------------------	
	// ES6的写法
	import React from 'react';
	
	class Breadcrumbs extends React.Component {
	  render() {
	    return <nav />;
	  }
	};
	
	export default Breadcrumbs;
	
	
	如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。
	
	
	
	
	
	
	

